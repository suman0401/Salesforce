VisualForce:
 Visualforce boasts nearly 150 built-in components, and provides a way for developers to create their own components. Visualforce markup can be freely mixed with HTML markup, CSS styles, and JavaScript libraries, giving you considerable flexibility in how you implement your app’s user interface.

The expression syntax in Visualforce is: {! expression }

Anything inside the {! } delimiters is evaluated and dynamically replaced when the page is rendered or when the value is used. Whitespace is ignored.

Visualforce expressions are case-insensitive, and spaces within the {! ... }are ignored. So these expressions all produce the same value:
{! $User.FirstName}
{!$USER.FIRSTNAME}
{! $user.firstname }

<p>The year today is {! YEAR(TODAY()) }</p>
<p>Tomorrow will be day number  {! DAY(TODAY() + 1) }</p>
<p>Let's find a maximum: {! MAX(1,2,3,4,5,6,5,4,3,2,1) } </p>
<p>The square root of 49 is {! SQRT(49) }</p>
<p>Is it true?  {! CONTAINS('salesforce.com', 'force.com') }</p>


Assignment:
<apex:page standardController="Opportunity">
    <apex:pageBlock title="Opportunity Info">
    <apex:pageBlockSection>
        <apex:outputField value="{! Opportunity.Name}"/>
        <apex:outputField value="{! Opportunity.Amount}"/>
        <apex:outputField value="{! Opportunity.CloseDate}"/>
        <apex:outputField value="{! Opportunity.Account.Name}"/>
        </apex:pageBlockSection>
    </apex:pageBlock>
</apex:page>

For Error:
Use <apex:pageMessages> to display any form handling errors or messages.
Your page should provide useful feedback when things go wrong, such as when a required field is missing, or when a field value fails validation. The standard controller actually handles all of that for you. All you need to do is tell it where to put the messages on the page.

Under the <apex:pageBlock> tag, add the following line.
<apex:pageMessages/>
Try deleting the account’s name, and saving the record with a blank name. Validation errors are displayed for the page. Edit account with page error messages
As you can see, <apex:inputField> displays errors for its own field, but for a longer form it’s a nice touch to list all of the page’s errors in one place at the top of the page.

The standard controller already collects all of the page’s messages when the form is processed. The <apex:pageMessages> component enables you to display those messages wherever you see fit.